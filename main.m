%%          Part0:Initialization
clear all
close all
clc
[FileName,PathName] = uigetfile('*.bmp','Select an image');
im=imread(FileName);
   [m,n]=size(im);   
   N=m*n;   
   L=256;
%--------------------------------------------------------------------------
%%          Part1:Otsu's method to get binary image
for i=1:L  
    count(i)=length(find(im==(i-1)));  
    p(i)=count(i)/(N); 
end   
w0=0; 
u0=0;
u1=0;
for i=1:L
    w0=w0+p(i);     
    w00(i)=w0;           
    w11(i)=1-w0;
    for j=1:i
        u0=u0+(j-1)*p(j)/w00(i);
    end
    for j=i+1:L
        u1=u1+(j-1)*p(j)/w11(i);
    end
    u00(i)=u0;
    u11(i)=u1;
    u0=0;
    u1=0;
end
B=w00.*w11.*(u11-u00).*(u11-u00);
[y,th]=max(B);
im1=imbinarize(im,th/256);
figure(1)
subplot(1,2,1);
imshow(im,[]);
title('Original image');
subplot(1,2,2);
imshow(im1,[]);
title("Binary image by Otsu's method");
%--------------------------------------------------------------------------
%%          Part2:2-step thinning
f=makelut('first',3);                       %create lookup table for first step
s=makelut('second',3);                      %create lookup table for second step
flag=0;
i=0;
im1=1-im1;
im_f=bwlookup(im1,f);                       %neighborhood operations for first step
im_s=bwlookup(im_f,s);                      %neighborhood operations for second step
while flag==0                               %judgement for the two steps
   if im_s==im_f
       flag=1;
   else
       i=i+1;
       im_f=im_s;
   end
   if mod(i,2)==0
       im_s=bwlookup(im_f,s);
   else
       im_s=bwlookup(im_f,f);
   end
end
im2=im_s;
figure(2)
subplot(1,2,1);
imshow(im1);
title("inverse image");
subplot(1,2,2);
imshow(im2);
title('skeleton image abtained by two-step thining');
%--------------------------------------------------------------------------
%%          Part3:MAT-based thinning
se=strel('disk',5);                         %make structuring element
im1=imopen(im1,se);                         %morphological opening to remove noise
im4=bwdist(~im1);                           %perform distance transform
im5=zeros(m,n);                             %perform medial axis transform
for i=2:m-2
    for j=2:n-2
        if((im4(i,j)>im4(i+1,j))&&(im4(i,j)>im4(i-1,j)))
            im5(i,j)=im4(i,j);
        elseif((im4(i,j)>im4(i,j+1))&&(im4(i,j)>im4(i,j-1)))
            im5(i,j)=im4(i,j);
        elseif((im4(i,j)>im4(i-1,j))&&(im4(i,j)==im4(i+1,j))&&(im4(i+1,j)>im4(i+2,j)))
            im5(i,j)=im4(i,j);
        elseif((im4(i,j)>im4(i,j-1))&&(im4(i,j)==im4(i,j+1))&&(im4(i,j+1)>im4(i,j+2)))
            im5(i,j)=im4(i,j);                   
        end
    end
end
im5=im2bw(im5,1);                           %make binary skeleton
figure(3)                                   %show the result
subplot(2,2,1) 
imshow(im1); 
title('Image aftering opening');
subplot(2,2,2) 
imshow(im4); 
title('Distance transform');
subplot(2,2,3) 
imshow(im5,[]); 
title('MAT');
subplot(2,2,4) 
imshow(im5,[]); 
title('Skeleton');
%--------------------------------------------------------------------------
%%          Part4:Using matlab function for comparison
im0=imbinarize(im,graythresh(im));          %binary image by matlab
im3=bwmorph(~im0,'thin',Inf);               %thinning by matlab toolbox
figure(4)
subplot(1,2,1)
imshow(im0,[]);
title('the binary image with threshold selected by Matlab function');
subplot(1,2,2)
imshow(im3,[])
title('skeleton generated by Matlab toolbox');